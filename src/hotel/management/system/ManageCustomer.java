package hotel.management.system;


import hotel.management.system.DBconnection;
import javax.swing.JOptionPane;
import java.sql.*;
import net.proteanit.sql.DbUtils;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ASUS
 */
public class ManageCustomer extends javax.swing.JFrame {

    /**
     * Creates new form ManageCustomer
     */
    public ManageCustomer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtid = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbGender = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtNationality = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cmbBed = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cmbRoomType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtDays = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(txtid, new org.netbeans.lib.awtextra.AbsoluteConstraints(318, 113, 155, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manage Customer");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 19, -1, -1));

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Mobile", "Address", "Gender", "Email", "Nationality", "Bed", "RoomType", "Days", "Price", "Date"
            }
        ));
        jTable1.setRowHeight(25);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 1130, 60));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 111, -1, -1));

        btnClose.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1162, 627, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 100, -1));

        txtName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 226, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Mobile Number");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 150, -1));

        txtMobile.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 226, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Address");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 130, -1));

        txtAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 470, 226, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Gender");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 520, 120, -1));

        cmbGender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        getContentPane().add(cmbGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 226, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Email");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 600, 100, -1));

        txtEmail.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 630, 226, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Nationality");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 300, 100, -1));

        txtNationality.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtNationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, 300, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Check IN Date");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, 120, -1));

        txtDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, 303, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Bed");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 300, 110, -1));

        cmbBed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmbBed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single", "Double", "Triple" }));
        getContentPane().add(cmbBed, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 330, 251, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Room Type");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 400, 130, -1));

        cmbRoomType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A/C", "Non-A/C" }));
        getContentPane().add(cmbRoomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 420, 251, -1));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Days");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 470, -1, -1));

        txtDays.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 500, 130, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Price");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 550, 70, -1));

        txtPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 580, 251, -1));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save-icon--1.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 570, -1, -1));

        btndelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 570, -1, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/All background.png"))); // NOI18N
        jLabel12.setText("jLabel12");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 690));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //Read Customer
    String idText = txtid.getText().trim();  
    final int customerID;
    try {
        customerID = Integer.parseInt(idText);
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Customer ID must be a number.");
        return;
    }

    //Query
    final String sql = """
        SELECT cusId, cusName, mobile, address, gender, email, nationality,
               bed, roomtype, days, price, date
        FROM customer
        WHERE cusId = ?
        """;

    try (Connection conn = DBconnection.connect()) {

        
        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            pst.setInt(1, customerID);
            try (ResultSet rs = pst.executeQuery()) {
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "Customer ID does not exist.");
                    return;
                }

                // Text fields
                txtName.setText(rs.getString("cusName"));
                txtMobile.setText(rs.getString("mobile"));
                txtAddress.setText(rs.getString("address"));
                txtEmail.setText(rs.getString("email"));
                txtNationality.setText(rs.getString("nationality"));

                // Date
                java.sql.Date d = rs.getDate("date");
                if (d != null) {
                    txtDate.setText(new java.text.SimpleDateFormat("yyyy/MM/dd").format(d));
                } else {
                    txtDate.setText("");
                }

                // Numbers
                txtDays.setText(String.valueOf(rs.getInt("days")));
                Object priceObj = rs.getObject("price"); 
                txtPrice.setText(priceObj == null ? "" : String.valueOf(priceObj));

                // Combos 
                safeSelect(cmbGender, rs.getString("gender"));
                safeSelect(cmbBed, rs.getString("bed"));
                safeSelect(cmbRoomType, rs.getString("roomtype"));
            }
        }

        
        try (PreparedStatement pst2 = conn.prepareStatement(sql)) {
            pst2.setInt(1, customerID);
            try (ResultSet rs2 = pst2.executeQuery()) {
                jTable1.setModel(DbUtils.resultSetToTableModel(rs2));
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
         
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void safeSelect(javax.swing.JComboBox<String> combo, String value) {
    if (value == null) return;
    boolean found = false;
    for (int i = 0; i < combo.getItemCount(); i++) {
        if (value.equalsIgnoreCase(String.valueOf(combo.getItemAt(i)))) {
            found = true; break;
        }
    }
    if (!found) combo.addItem(value);
    combo.setSelectedItem(value);
}
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Collect raw inputs
        String name = txtName.getText();
        String mobile = txtMobile.getText();
        String address = txtAddress.getText();
        String gender = (String) cmbGender.getSelectedItem();
        String email = txtEmail.getText();
        String nationality = txtNationality.getText();
        String bed = (String) cmbBed.getSelectedItem();
        String roomType = (String) cmbRoomType.getSelectedItem();

        // Validate empty
        if (name == null || name.trim().isEmpty()
            || mobile == null || mobile.trim().isEmpty()
            || address == null || address.trim().isEmpty()
            || email == null || email.trim().isEmpty()
            || nationality == null || nationality.trim().isEmpty()
            || txtDays.getText() == null || txtDays.getText().trim().isEmpty()
            || txtPrice.getText() == null || txtPrice.getText().trim().isEmpty()
            || txtDate.getText() == null || txtDate.getText().trim().isEmpty()
            || txtid.getText() == null || txtid.getText().trim().isEmpty()
            || gender == null || String.valueOf(gender).trim().isEmpty()
            || bed == null || String.valueOf(bed).trim().isEmpty()
            || roomType == null || String.valueOf(roomType).trim().isEmpty()) 
        {
            JOptionPane.showMessageDialog(this, "All fields are required. Please fill in every field.");
            return;
        }
      

        // safe integer parsing
        int days;
        try {
            days = Integer.parseInt(txtDays.getText().trim());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Days must be a whole number.");
            return;
        }

        int price;
        try {
            price = Integer.parseInt(txtPrice.getText().trim());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Price must be a whole number.");
            return;
        }

        int cusID;
        try {
            cusID = Integer.parseInt(txtid.getText().trim());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Customer ID must be a whole number.");
            return;
        }
        

        //Date
        java.sql.Date checkinDate;
        try {
            java.util.Date parsed = new java.text.SimpleDateFormat("yyyy/MM/dd")
                    .parse(txtDate.getText().trim());
            checkinDate = new java.sql.Date(parsed.getTime());
        } catch (java.text.ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format (use yyyy/MM/dd).");
            return;
        }
        

        // Update query
        try {
            Connection conn = DBconnection.connect();
            String sql = "UPDATE customer SET cusName=?, mobile=?, address=?, gender=?, email=?, nationality=?, bed=?, roomtype=?, days=?, price=?, date=?  WHERE cusID = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, name);
            pst.setString(2, mobile);
            pst.setString(3, address);
            pst.setString(4, gender);
            pst.setString(5, email);
            pst.setString(6, nationality);
            pst.setString(7, bed);
            pst.setString(8, roomType);
            pst.setInt(9, days);
            pst.setInt(10, price);
            pst.setDate(11, checkinDate);
            pst.setInt(12, cusID);

            int rows = pst.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Successfully updated");
            } else {
                JOptionPane.showMessageDialog(null, "No record found with Customer ID");
            }
        } catch (java.sql.SQLIntegrityConstraintViolationException dup) {            
            JOptionPane.showMessageDialog(this, "Update failed: " + dup.getMessage());
        } catch (java.sql.SQLException se) {
            JOptionPane.showMessageDialog(this, "Database error: " + se.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please Enter data in correct format");
        }

    
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        //ensure Customer ID is provided
        if (txtid.getText() == null || txtid.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the Customer ID before deleting.");
            txtid.requestFocus();
            return;
        }

        int cusID;
        try {
            cusID = Integer.parseInt(txtid.getText().trim());
            if (cusID <= 0) {
                JOptionPane.showMessageDialog(this, "Customer ID must be a positive whole number.");
                txtid.requestFocus();
                return;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Customer ID must be a whole number.");
            txtid.requestFocus();
            return;
        }

        // proceed with your existing confirmation + delete logic
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?","Confirm Delete",JOptionPane.YES_NO_OPTION);
 
        if (confirm == JOptionPane.YES_NO_OPTION) {
            try {
                Connection conn = DBconnection.connect();
                String sql = "DELETE FROM customer Where cusID = ?";
                PreparedStatement pst = conn.prepareStatement(sql);

                pst.setInt(1, cusID);
                int rows = pst.executeUpdate();

                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Customer deleted successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "No customer found for that ID.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error deleting customer: " + e.getMessage());
            }
        }


    }//GEN-LAST:event_btndeleteActionPerformed

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btndelete;
    private javax.swing.JComboBox<String> cmbBed;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbRoomType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNationality;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables
}
